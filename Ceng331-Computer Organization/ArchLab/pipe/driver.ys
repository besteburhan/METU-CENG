#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len <= 0?
	jg len_g_zero	# if so, goto Done:
	ret
######
len_g_zero:
	irmovq $8,%r8
	subq %rdx,%r8	# 8-len>0
	jle len_ge_8		# len= 8 9 10 ..
	#len_l_8
######
len_l_8:
	subq %rdx,%r8	#8-2len
	jg len_l_4
	# len_ge_4
######
len_ge_4:
	mrmovq (%rdi),%r11
	mrmovq 8(%rdi),%r12
	mrmovq 16(%rdi),%r13
	mrmovq 24(%rdi),%r14
	iaddq $32, %rdi		# src++
	rmmovq %r11, (%rsi)
	rmmovq %r12, 8(%rsi)
	rmmovq %r13, 16(%rsi)
	rmmovq %r14, 24(%rsi)
	iaddq $32, %rsi
	iaddq $-4,%rdx  #go to plus4
	jmp plus4
######
len_l_4:
	subq %rdx,%r8	#8-3len
	jg len_le_2
	# jmp len_g_2
########
len_g_2: 				#len=3
	mrmovq (%rdi),%r12
	mrmovq 8(%rdi),%r13
	mrmovq 16(%rdi),%r14
	rmmovq %r12, (%rsi)
	rmmovq %r13, 8(%rsi)
	rmmovq %r14, 16(%rsi)
	p3:
		andq %r12, %r12
		jle p2
		iaddq $1,%rax
	p2:
		andq %r13, %r13
		jle p1
		iaddq $1,%rax
	p1:
		andq %r14, %r14
		jle Done
		iaddq $1,%rax
		ret
########
len_le_2:	#len=1 or len=2
	mrmovq (%rdi),%r14
	rmmovq %r14, (%rsi)
	andq %r14, %r14
	jle c_len_le_2
	iaddq $1,%rax
c_len_le_2:
	iaddq $-1,%rdx
	andq %rdx,%rdx
	jle Done	#len 1ymis
	mrmovq 8(%rdi),%r14
	rmmovq %r14, 8(%rsi)
	andq %r14, %r14
	jle Done
	iaddq $1,%rax
	ret
######
len_ge_8:
	mrmovq (%rdi),%rcx
	mrmovq 8(%rdi),%rbx
	mrmovq 16(%rdi),%r9
	mrmovq 24(%rdi),%r10
	mrmovq 32(%rdi),%r11
	mrmovq 40(%rdi),%r12
	mrmovq 48(%rdi),%r13
	mrmovq 56(%rdi),%r14
	iaddq $64, %rdi		# src++
	rmmovq %rcx, (%rsi)
	rmmovq %rbx, 8(%rsi)
	rmmovq %r9, 16(%rsi)
	rmmovq %r10, 24(%rsi)
	rmmovq %r11, 32(%rsi)
	rmmovq %r12, 40(%rsi)
	rmmovq %r13, 48(%rsi)
	rmmovq %r14, 56(%rsi)
	iaddq $64, %rsi
	iaddq $-8,%rdx 	#go to plus 8
plus8:
	andq %rcx, %rcx
	jle plus7
	iaddq $1,%rax
plus7:
	andq %rbx, %rbx
	jle plus6
	iaddq $1,%rax
plus6:
	andq %r9, %r9
	jle plus5
	iaddq $1,%rax
plus5:
	andq %r10, %r10
	jle plus4
	iaddq $1,%rax
plus4:
	andq %r11, %r11
	jle plus3
	iaddq $1,%rax
plus3:
	andq %r12, %r12
	jle plus2
	iaddq $1,%rax
plus2:
	andq %r13, %r13
	jle plus1
	iaddq $1,%rax
plus1:
	andq %r14, %r14
	jle plus0
	iaddq $1,%rax
plus0:
	andq %rdx,%rdx	#len>0
	jg len_g_zero
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 35.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $35,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $63,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 2
	.quad 3
	.quad -4
	.quad 5
	.quad 6
	.quad 7
	.quad -8
	.quad 9
	.quad 10
	.quad -11
	.quad -12
	.quad -13
	.quad -14
	.quad -15
	.quad -16
	.quad 17
	.quad -18
	.quad -19
	.quad 20
	.quad -21
	.quad 22
	.quad -23
	.quad -24
	.quad 25
	.quad -26
	.quad 27
	.quad 28
	.quad 29
	.quad 30
	.quad -31
	.quad 32
	.quad 33
	.quad 34
	.quad 35
	.quad -36
	.quad -37
	.quad 38
	.quad 39
	.quad 40
	.quad -41
	.quad -42
	.quad -43
	.quad -44
	.quad -45
	.quad -46
	.quad 47
	.quad 48
	.quad -49
	.quad 50
	.quad 51
	.quad -52
	.quad 53
	.quad 54
	.quad 55
	.quad 56
	.quad -57
	.quad 58
	.quad -59
	.quad -60
	.quad 61
	.quad 62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
